#
# Copyright 2000-2008 JetBrains s.r.o.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

uml.support.plugin=Uml Plugin

uml.class.diagramm.file.name=''{0}'' Class Diagram
show.structure=Show Structure
show.implementation=Show implementations
add.subtypes.to.the.diagram=<html><body>Add Subtypes of <b>{0}</b> to the diagram</body></html>
searching.for.subtypes.title=<html><body>Searching for Subtypes of <b>{0}</b></body></html>
show.camel.names=Show Camel names
building.diagram=Building {0}
show.methods=Show methods
show.fields=Show fields
show.constructors=Show constructors
rebuilding.uml.diagram=Rebuilding UML diagram
enable.color.manager=Enable &colors
show.dependencies=Show dependencies
show.help=Show help
show.inner.classes=Show Inner Classes
name.is.invalid=Fully qualified name {0} is invalid
error=Error
class.exists=Class {0} exists
package.doesnt.exist=Package {0} doesn''t exist. Create package first
new.class=New Class
new.enum=New Enum
new.interface=New Interface
new.annotation=New Annotation
cant.create.element=Can''t create {0} in directory {1}
add.new.field.title=Add new field or constant to {0}
create.new.enum.constant.label=Type enum constant name (one per line)
add.new.enum.constant.title=Add new enum constant to {0}
create.new.method.dialog.title=Create New Method
create.new.constructor.dialog.title=Create New Constructor
create.method=&Create
final.class.cant.be.inherited=Class {0} is final
node.is.interface=Interface can only extend an interface
already.extends=Class cannot extend multiple classes
error.cant.create.edge=Cannot Create Relationship Link
preview=Preview
this.will.remove.relationship.link.between.classes=This will remove relationship link between classes and modify class {0}. Continue?

remove.relationship.link=Remove relationship link
class.must.be.abstract.or.implement.methods=Class ''{0}'' must either be declared abstract or implement required abstract methods
class.must.be.abstract.title=Implement methods or declare class abstract
generate.methods=Generate methods
make.abstract=Make abstract
initializer.is.empty=Initializer is empty
constant.in.interface.must.have.initializer=Constant in interface must have initializer
class.is.readonly=Class ''{0}'' is read only
file.is.readonly=File ''{0}'' is read only
annotation.class.cant.be.extended.or.implemented=Annotations can't extend/implement other classes/interfaces
remove.annotation.from.class=Remove annotation @{0} from {1}
relationship.already.exists=Realtionship between {0} and {1} already exists
prompt.enter.class.name.to.add=Enter class name to add
show.supers.for=Super classes for {0}
UML=UML
cant.read.uml.file=File {0} corrupted or has unsupported format
uml.class.diagram=UML Class Diagram for {0}
uml.file.name.for.changes=Changes for ''{0}''
class.elements=Class Elements
default.visibility.settings=Default Visibility Settings
other=Other
select.change.list=Select Change List
select.uml.provider=Select Diagram Type
uml.actions.group.title=UML Actions
dependencies=Dependencies
uml.structure.view=Diagram Elements
abstract=A&bstract
set.up.jdk=JDK is not set up
make.class.abstract=Make Class Abstract
change.visibility.group.text=Change Visibility Level
change.scope.group.text=Change Scope
modules.diagram.presentable.name=Project Modules
uml.java.presentable.name=Java Class Diagrams
uml.jigsaw.presentable.name=Java Modules Diagram
diff.presentable.name=Show Difference
add.modules.libraries=Add Module and Libraries...
looking.for.dependencies=Looking for dependencies
dependencies.for.module=Dependencies for module ''{0}''
show.modules.dependencies=Show Module Dependencies
fit.content.after.layout=&Fit content after layout
do.relayout.when.new.elements.were.added=Do &relayout when new elements were added
default.layout=Default &Layout:
default.scope=Default &Scope:
change.list.contains.too.many.files=Change list ''{0}'' contains more than {1} files
show.categories.title=Show Categories
export.to.file.action=Export to File
uml.java.calculating.dependencies=Calculating Dependencies
uml.java.package.title=Package {0}
uml.java.default.package.title=Top-Level Package